
if ~exist('allDataRaw','var');
    
    allDataRaw = load('cleanTimeSerie.mat');
    allDataRaw = allDataRaw.anDataOut;
    
    for cnt = 1:numel(allDataRaw)
        meanIntervall(cnt) = allDataRaw{cnt}.meanIntervall;
    end
    [~, sortInd]=sort(meanIntervall);
    allDataRaw= allDataRaw(sortInd);
    meanIntervall= meanIntervall(sortInd);
    clear sortInd
    
end


%choose Data
choosenInd = [1 2 3 6 8 10 12 13 14 15];
allData = allDataRaw(1,choosenInd);
allIntervall = meanIntervall(choosenInd);
%sort out intervall with to less data or difference between LWC/IWC/TWC
clear meanNumberReal validIntervallPerc
for cnt = 1:numel(allData)
    meanNumberReal(cnt) = mean(allData{cnt}.NumberReal);
    cond1 = allData{cnt}.NumberReal >= 0.2*meanNumberReal(cnt);
    cond2 = allData{cnt}.NumberReal > 10;
    cond3 = (allData{cnt}.TWContent-allData{cnt}.LWContent- allData{cnt}.IWContent)./allData{cnt}.TWContent <.5;
    cond4 = (allData{cnt}.TWContent-allData{cnt}.LWContent- allData{cnt}.IWContent) <.3;
    allData{cnt}.isValidIntervall =  cond1 & cond2 & cond3 & cond4;
    
    validIntervallPerc(1,cnt) = sum(cond1/numel(allData{cnt}.isValidIntervall));
    validIntervallPerc(2,cnt) = sum(cond2/numel(allData{cnt}.isValidIntervall));
    validIntervallPerc(3,cnt) = sum(cond3/numel(allData{cnt}.isValidIntervall));
    validIntervallPerc(4,cnt) = sum(cond4/numel(allData{cnt}.isValidIntervall));
    validIntervallPerc(5,cnt) = sum(allData{cnt}.isValidIntervall)/numel(allData{cnt}.isValidIntervall);
    
end
if 0
    figure(99)
    plot(1:size(validIntervallPerc,2),validIntervallPerc(1,:),...
        1:size(validIntervallPerc,2),validIntervallPerc(2,:),...
        1:size(validIntervallPerc,2),validIntervallPerc(3,:),...
        1:size(validIntervallPerc,2),validIntervallPerc(4,:),...
        1:size(validIntervallPerc,2),validIntervallPerc(5,:))
    legend({'minRealNum','minAbsNum','minRelDiff','minAbsDiff','All'})
end


chooseDay = 6;
clear anData2
plotXLimRaw  = [datenum([2013 2 chooseDay 0 0 0]) datenum([2013 2 chooseDay+1 0 0 0])];
for cnt = 1:numel(allData)
    anData2{cnt}.plotXLimInd = [find(allData{cnt}.timeStart >= plotXLimRaw(1),1,'first') find(allData{cnt}.timeStart <= plotXLimRaw(2),1,'last')];
    
    if numel(anData2{cnt}.plotXLimInd)==1
        anData2{cnt}.plotXLimInd = [1 1];
    end
    anData2{cnt}.plotXLim = [allData{cnt}.timeStart(anData2{cnt}.plotXLimInd(1)),...
        allData{cnt}.timeStart(anData2{cnt}.plotXLimInd(2))];
end

if 1
    figure(2)
    subplot(3,3,1)
    clear data  
    for cnt = 1:numel(allData)
       data{cnt} = allData{cnt}.TWConcentraction(allData{cnt}.isValidIntervall);
    end
    plotDependencyOnIntervall(data)
    ylabel('Total Conc. [cm^{-3}]')
    
    subplot(3,3,2)
    clear data  
    for cnt = 1:numel(allData)
       data{cnt} = allData{cnt}.LWConcentraction(allData{cnt}.isValidIntervall)./...
           allData{cnt}.TWConcentraction(allData{cnt}.isValidIntervall);
    end
    plotDependencyOnIntervall(data)
    ylabel('Liquid/Total Conc.')
    
    subplot(3,3,3)
    clear data  
    for cnt = 1:numel(allData)
       data{cnt} = allData{cnt}.IWConcentraction(allData{cnt}.isValidIntervall)./...
           allData{cnt}.TWConcentraction(allData{cnt}.isValidIntervall);
    end
    plotDependencyOnIntervall(data)
    ylabel(Ice/Total Conc.')
  
    subplot(3,3,4)
    boxplot(anData.TWContent, B)
    set(gca,'YScale','log')
    set(gca,'YTick',[1e-6 1e-5 1e-4 1e-3 1e-2 1e-1 1e-0 1e1 1e2 1e3 1e4])
    ylabel('Total Content [g m^{-3}]')    
    subplot(3,3,5)
    boxplot(anData.LWContent./anData.TWContent, B)
    ylabel('Liquid/Total Content')
    subplot(3,3,6)
    boxplot(anData.IWContent./anData.TWContent, B)
    ylabel('Ice/Total Content')
    subplot(3,3,7)
    boxplot(anData.meanD*1e6, B)
    set(gca,'YScale','log')
    set(gca,'YTick',[10 20 50 100 200])
    ylabel('mean diameter [\mum]')
    ylim([6 250])
    subplot(3,3,8)
    boxplot(anData.measMeanV, B)
    ylabel('wind velocity [m s^{-1}]')
    subplot(3,3,9)
    boxplot(anData.measMeanAzimutSonic, B)
    ylabel('wind direction [°]')
    

end
if 0
    figure(1)
    clf
    clear s;
    
    set(0,'DefaultAxesFontSize',15);
    set(0,'DefaultAxesLineWidth',2);
    set(gcf,'DefaultLineLineWidth',2);
    axnumber = 3;
    for m=1:axnumber
        axleft = 0.09;
        axright = 0.10;
        axtop = 0;
        axbottom = 0.07;
        axgap = 0.01;
        axwidth = 1-axleft-axright;
        axheight = (1-axbottom-axtop)./axnumber-axgap*(axnumber-1);
        axPos(m,:) = [axleft axbottom+(m-1)*(axheight+axgap) axwidth axheight];
    end
    
    markerSize=40;
    scLineWidht=1;
    anParameter2.plotColors = cool(numel(allData));
    s(3)=axes('position',axPos(1,:));
    hold on
    for cnt = 1:numel(allData)
        if cnt == 1
            scatter(allData{cnt}.timeStart(allData{cnt}.isValidIntervall), allData{cnt}.IWContent(allData{cnt}.isValidIntervall), markerSize,'x','MarkerEdgeColor',[0 0.5 0]);
        else
            plot(allData{cnt}.timeStart(allData{cnt}.isValidIntervall), allData{cnt}.IWContent(allData{cnt}.isValidIntervall),'Color',anParameter2.plotColors(cnt,:));
        end
        hold on
    end
    
    ylabel({'Water Content', 'Ice [g*m^{-3}]'},'fontsize',18,'lineWidth',scLineWidht);
    set(gca,'XLim',anData2{1}.plotXLim,'XTickLabel',[]);%,'YLim',[0 3],'YTick',[0 0.5 1 1.5 2 2.5]);
    xlabel('Time (UTC) [h]');
    datetick(gca,'x','HH-MM','keeplimits');
    box on
    
    s(2)=axes('position',axPos(2,:));
    hold on
    for cnt = 1:numel(allData)
        if cnt == 1
            scatter(allData{cnt}.timeStart(allData{cnt}.isValidIntervall), allData{cnt}.LWContent(allData{cnt}.isValidIntervall), markerSize,'x','MarkerEdgeColor',[0 0.5 0]);
        else
            plot(allData{cnt}.timeStart(allData{cnt}.isValidIntervall), allData{cnt}.LWContent(allData{cnt}.isValidIntervall),'Color',anParameter2.plotColors(cnt,:));
        end
        hold on
    end
    
    ylabel({'Water Content', 'Liquid [g*m^{-3}]'},'fontsize',18,'lineWidth',scLineWidht);
    %'YLim',[0 1],'YTick',[0 0.1 0.2 0.3 0.4 0.5 0.6]);
    set(gca,'XLim',anData2{1}.plotXLim);%,'YLim',[0 .4],'YTick',[0 .1 .2 .3 .4]);
    %xlabel('Time (UTC) [h]');
    datetick(gca,'x','HH-MM','keeplimits');
    set(gca,'XTickLabel',[]);
    box on
    
    s(1)=axes('position',axPos(3,:));
    hold on
    for cnt = 1:numel(allData)
        if cnt == 1
            scatter(allData{cnt}.timeStart(allData{cnt}.isValidIntervall), allData{cnt}.TWContent(allData{cnt}.isValidIntervall), markerSize,'x','MarkerEdgeColor',[0 0.5 0]);
        else
            plot(allData{cnt}.timeStart(allData{cnt}.isValidIntervall), allData{cnt}.TWContent(allData{cnt}.isValidIntervall),'Color',anParameter2.plotColors(cnt,:));
        end
        hold on
    end
    
    ylabel({'Water Content', 'Total [g*m^{-3}]'},'fontsize',18,'lineWidth',scLineWidht);
    %'YLim',[0 1],'YTick',[0 0.1 0.2 0.3 0.4 0.5 0.6]);
    set(gca,'XLim',anData2{1}.plotXLim);%,'YLim',[0 3],'YTick',[0 0.5 1 1.5 2 2.5]);
    %xlabel('Time (UTC) [h]');
    datetick(gca,'x','HH-MM','keeplimits');
    set(gca,'XTickLabel',[]);
    box on
end
%
% s(1)=axes('position',axPos(3,:));
% plot(anData.timeStart, nanmoving_average(anData.TWContent,meanNum),'k');
% hold on
% plot(anData.timeStart, anData.cdpMean,'b');
% plot(anData.timeStart, anData.pvmMean,'Color',[0 0.5 0]);
% legend('HOLIMO','CDP','PVM');
%
% %     [ax,h1,h2]= plotyy(anData.timeStart, nanmoving_average(rem(anData.measMeanAzimutSonic+180,360), meanNum),...
% %         anData.timeStart, nanmoving_average(anData.measMeanT, meanNum));
% %     hold(ax(1),'on')
% %     hold(ax(2),'on')
% %     scatter(ax(1),anData.timeStart, rem(anData.measMeanAzimutSonic+180,360),markerSize,'bx','lineWidth',scLineWidht);
% %     scatter(ax(2),anData.timeStart, anData.measMeanT, markerSize,'x','lineWidth',scLineWidht,'MarkerEdgeColor',[0 0.5 0]);
%
% %    plot(ax(1), BTplotData.timeUTC, BTplotData.winddirection,'b--');
% %    plot(ax(2), BTplotData.timeUTC, BTplotData.temp,'--','Color',[0 0.5 0]);
% %set(get(ax(1),'Ylabel'),'String',{'Wind Direction', 'Azimut [°]'},'fontsize',18,'lineWidth',scLineWidht,'Color','b');
% %set(get(ax(2),'Ylabel'),'String',{'Air Temperature', '[°C]'},'fontsize',18,'lineWidth',scLineWidht,'Color',[0 0.5 0]);
%
%
%
%
% set(get(gca,'Ylabel'),'String',{'Water Content', 'Total [g*m^{-3}]'},'fontsize',18,'lineWidth',scLineWidht,'Color','k');
% set(gca,'XLim',anData2{1}.plotXLim,'XTick',plotXTick,'XTickLabel',[]);
% %    'YLim',[0 360],'YTick',[0 90 180 270 360]);
% %     set(ax(2),'XLim',anData2{1}.plotXLim,'XTick',plotXTick,'XTickLabel',[]);
% %     %    'YLim',[-10 -6],'YTick',[-10 -9 -8 -7 -6]);
%
% set(gca,'XTickLabel',[]);
% %     set(ax(2),'XTickLabel',[]);
%
%
% set(gcf, 'PaperUnits','centimeters');
% set(gcf, 'PaperPosition',[0 0 30 20]);
% set(gcf, 'PaperSize', [30 20]);
